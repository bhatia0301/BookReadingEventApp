pipeline{
    
    agent any

    stages{
        
        stage('Checkout'){
            steps{
                checkout scm
            }
        }

         stage('Build') {
            steps {
                sh 'dotnet build BookReadingWebApp.sln --configuration Release'
            }
        }

         stage('Test') {
            steps {
                sh 'dotnet test BookReadingApp.Tests/BookReadingApp.Tests.csproj'
            }
        }

        stage('Build Docker Image') {
                steps {
                    script {
                        def imageName = 'bookreadingimage'
                        def imageTag = 'latest'
                        def container_name = 'BookReadingApp'
                        def dockerfilePath = "${WORKSPACE}/BookReadingWebApp/Dockerfile"
                        def existingImageId = sh(script: "docker images -q ${imageName}:${imageTag}", returnStdout: true).trim()
                        if (existingImageId) {
                            echo "Existing Docker container name: ${container_name}"
                            sh "docker rm -f ${container_name}"
                            echo "Existing Docker image ID: ${existingImageId}"
                            sh "docker rmi -f ${existingImageId}"
                            echo "Deleted existing Docker image: ${imageName}:${imageTag}"
                        }
                        sh "docker build -t ${imageName}:${imageTag} -f ${dockerfilePath} ${WORKSPACE}"
                    }
                }
            }

             stage('Run SQL Server Container') {
            steps {
                script {
                    def container_name = "sqlserver"
                    
                    // Check if the container exists
                    def container_exists = sh(script: "docker ps -a -q -f name=${container_name}", returnStatus: true)
                    
                    if (container_exists == 0) {
                        // Container exists, check its state
                        def container_state = sh(script: "docker inspect -f '{{.State.Status}}' ${container_name}", returnStdout: true).trim()
                        
                        if (container_state == "exited") {
                            echo "Container '${container_name}' is in 'exited' state. Starting the container..."
                            sh "docker start ${container_name}"
                        } else if (container_state == "running") {
                            echo "Container '${container_name}' is already running."
                        } else {
                            echo "Error: Unable to determine the state of container '${container_name}'."
                            // Handle error appropriately
                        }
                    } else {
                        // Container does not exist, create it
                        echo "Container '${container_name}' does not exist. Creating the container..."
                        sh "docker run -d --name ${container_name} -p 1433:1433 --network testing -e 'ACCEPT_EULA=Y' -e 'SA_PASSWORD=Naman@123' -e 'MSSQL_PID=Express' mcr.microsoft.com/mssql/server:2022-preview-ubuntu-22.04"
                    }
                }
            }
        }
         stage('Run Container') {
            steps {
                script {
                     def imageId = sh(script: "docker images -q bookreadingimage:latest", returnStdout: true).trim()
                     echo "Docker image ID: ${imageId}"
                    sh "docker run -d --rm --name BookReadingApp -p 5001:80 --network testing -e 'ConnectionStrings__DefaultConnection=Server=sqlserver,1433;Database=BookReadingAppDB;User Id=SA;Password=Naman@123;Encrypt=False' -e ASPNETCORE_ENVIRONMENT=Development ${imageId}"
                }
            }
        }
    }  
 }
